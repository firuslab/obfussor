name: Obfucc-LLVM CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15 clang-15
        shell: bash

      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install llvm@15 || true
          # Add brew llvm to PATH for the remainder of the job
          echo "$(brew --prefix llvm@15)/bin" >> "$GITHUB_PATH"
        shell: bash

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: 15
          env: true

      - name: LLVM diagnostics
        run: |
          echo "=== llvm-as --version ==="
          llvm-as --version || true
          echo "=== FileCheck --version ==="
          FileCheck --version || true
        shell: bash

      - name: Build tiny test obfucc (Unix)
        if: runner.os != 'Windows'
        run: python3 tests/runner.py --build-only
        shell: bash

      - name: Build tiny test obfucc (Windows)
        if: runner.os == 'Windows'
        run: python tests/runner.py --build-only
        shell: pwsh

      - name: Normalize built obfucc path (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows: normalize built obfucc path
          $dst = Join-Path (Get-Location) 'build\Release\obfucc.exe'
          $candidates = @(
            'build\obfucc.exe',
            'build\bin\obfucc.exe',
            'build\Release\obfucc_test.exe',
            'build\obfucc_test.exe'
          )
          $found = $null
          foreach ($p in $candidates) {
              if (Test-Path $p) { $found = (Resolve-Path $p).ProviderPath; break }
          }
          if (-not $found) {
              Write-Host "No secondary build found; assuming obfucc already exists at $dst"
          } else {
              # Only copy if different (case-insensitive)
              $foundResolved = (Get-Item -LiteralPath $found).FullName.ToLowerInvariant()
              $dstResolved = if (Test-Path $dst) { (Get-Item -LiteralPath $dst).FullName.ToLowerInvariant() } else { '' }
              if ($foundResolved -ne $dstResolved) {
                  Copy-Item -Path $found -Destination $dst -Force
                  Write-Host "Copied $found -> $dst"
              } else {
                  Write-Host "Obfucc already normalized at $dst"
              }
          }
        shell: pwsh

      - name: Check Obfucc exists (Windows)
        if: runner.os == 'Windows'
        run: |
          if (-Not (Test-Path "build\Release\obfucc.exe")) {
            Write-Error "Obfucc not built! Check previous build step."
            exit 1
          } else { Write-Host "Obfucc exists: build\\Release\\obfucc.exe" }
        shell: pwsh

      - name: Run smoke tests (Unix)
        if: runner.os != 'Windows'
        run: bash tests/run_smoke.sh
        shell: bash

      - name: Normalize built obfucc (Unix)
        if: runner.os != 'Windows'
        run: |
          set -e
          candidates=(build/Release/obfucc build/obfucc build/bin/obfucc build/obfucc_test)
          found=""
          for p in "${candidates[@]}"; do
            if [ -x "$p" ]; then found="$p"; break; fi
          done
          if [ -z "$found" ]; then echo "Obfucc not found; searched: ${candidates[*]}"; exit 1; fi
          echo "Found built obfucc at: $found"
          mkdir -p build
          cp "$found" build/obfucc
          chmod +x build/obfucc
          echo "Copied $found -> build/obfucc"
        shell: bash

      - name: Run smoke tests (Windows)
        if: runner.os == 'Windows'
        run: pwsh -File tests/run_smoke.ps1 -Obfucc build\Release\obfucc.exe
        shell: pwsh

      - name: Run regression tests (Unix)
        if: runner.os != 'Windows'
        run: bash tests/run_regressions.sh
        shell: bash

      - name: Run regression tests (Windows)
        if: runner.os == 'Windows'
        run: pwsh -File tests/run_regressions.ps1 -Obfucc build\Release\obfucc.exe
        shell: pwsh

  build-only:
    name: Build-only on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15 clang-15
        shell: bash

      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install llvm@15 || true
          echo "$(brew --prefix llvm@15)/bin" >> "$GITHUB_PATH"
        shell: bash

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: 15
          env: true

      - name: LLVM diagnostics
        run: |
          echo "=== llvm-as --version ==="
          llvm-as --version || true
          echo "=== FileCheck --version ==="
          FileCheck --version || true
        shell: bash

      - name: Run build-only harness (Unix)
        if: runner.os != 'Windows'
        run: python3 tests/runner.py --build-only
        shell: bash

      - name: Run build-only harness (Windows)
        if: runner.os == 'Windows'
        run: python tests/runner.py --build-only
        shell: pwsh
